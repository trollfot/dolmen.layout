Layout
******

Let's first grok the meta module to define some basic grokkers::

  >>> import dolmen.layout
  >>> from cromlech.browser.testing import TestHTTPResponse

  >>> from grokcore.component import testing
  >>> testing.grok('dolmen.layout.meta')


Define a model and a request
============================

  >>> mammoth = object()

  >>> from zope.interface import Interface, implements
  >>> from cromlech.browser.testing import TestHTTPRequest
  >>> request = TestHTTPRequest()


Define a layout
===============

  >>> from zope.interface.verify import verifyClass
  >>> from grokcore.component import testing

Layout provide a base ILayout implementation to buid onto::

  >>> verifyClass(dolmen.layout.ILayout, dolmen.layout.Layout)
  True

Let's define one::

  >>> class DefaultLayout(dolmen.layout.Layout):
  ...     dolmen.layout.context(Interface)
  ...
  ...     def render(self, content='', view=None, *args, **more):
  ...         return u"I am the layout for %r." % content

  >>> testing.grok_component('default', DefaultLayout)
  True


An inheritable Page behavior
============================

  >>> class ResponseLayout(dolmen.layout.Layout):
  ...     dolmen.layout.context(Interface)
  ...     dolmen.layout.name('resp')
  ...
  ...     def render(self, content='', view=None, *args, **more):
  ...         return u"Correct layout for %r." % content

  >>> testing.grok_component('resp', ResponseLayout)
  True

  >>> class Page(object):
  ...
  ...     responseFactory = TestHTTPResponse
  ...
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...
  ...     def render(self, *args, **kwargs):
  ...         return "Isn't this pretty"
  ...
  ...     def update(self, *args, **kwargs):
  ...         pass
  ...
  ...     def __call__(self, *args, **kwargs):
  ...         response = self.responseFactory()
  ...         self.update()
  ...         layout = dolmen.layout.query_layout(
  ...             self.request, self.context,
  ...             dolmen.layout.ILayout, 'resp')
  ...         layout.update()
  ...         content = self.render()
  ...         result = layout.render(content=content, view=self)
  ...         response.write(result or u'')
  ...         return response

  >>> response = Page(mammoth, request)()
  >>> print response.body
  Correct layout for "Isn't this pretty".


Pushing something in the namespace
==================================

You sometime need to push something from the 
view in the layout namespace, for example to display specific menus associated
with this view. You can inject object at render time thanks to keywords 
arguments::

  >>> class SomeLayout(dolmen.layout.Layout):
  ...     dolmen.layout.context(Interface)
  ...
  ...     def render(self, content='', view=None, *args, **more):
  ...         return u"My view is %r." % view

  >>> class MyView(object):
  ...     pass

  >>> view = MyView()
  >>> layout = SomeLayout(mammoth, request)
  >>> layout.update()
  >>> print layout.render(content="something to render", view=view)
  My view is <...MyView...>.
