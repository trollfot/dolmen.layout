Layout
******

Let's first grok the meta module to define some basic grokkers::

  >>> import dolmen.layout
  >>> dolmen.layout.testing.grok('dolmen.layout.meta')


Define a model and a request
============================

  >>> mammoth = object()
  >>> request = object()


Define a layout
===============

  >>> from zope.interface import Interface, implements
  >>> from zope.interface.verify import verifyClass
  >>> from grokcore.component import testing

Layout provide a base ILayout implementation to buid onto::

  >>> verifyClass(dolmen.layout.ILayout, dolmen.layout.Layout)
  True

Let's define one::

  >>> class DefaultLayout(dolmen.layout.Layout):
  ...     dolmen.layout.context(Interface)
  ...
  ...     def render(self, content):
  ...         return u"I am the layout for %r. This is easy" % content

  >>> testing.grok_component('default', DefaultLayout)
  True


Query a layout from a view
==========================

  >>> class QueryView(object):
  ...
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...
  ...     @dolmen.layout.layout(dolmen.layout.ILayout)
  ...     def render(self):
  ...         return u"a query view rendering %r" % self.context

  >>> print QueryView(mammoth, request).render()
  I am the layout for u'a query view rendering <object object at ...>'.
  This is easy



Use a direct layout
===================

  >>> class SimpleLayout(dolmen.layout.Layout):
  ...
  ...     def render(self, content):
  ...         return u"I am the layout for %r. This is DIRECT" % content


  >>> class DirectView(object):
  ...
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...
  ...     @dolmen.layout.layout(layout=SimpleLayout)
  ...     def render(self):
  ...         return u"a direct view rendering %r" % self.context

  >>> print DirectView(mammoth, request).render()
  I am the layout for u'a direct view rendering <object object at ...>'.
  This is DIRECT


An inheritable Page behavior
============================

Decorator would prevent subclass to retrieve render result before layout
application, so another method is to apply layout in __call__.
For that we will use query_layout to get the layout ::

  >>> import webob

  >>> class ResponseLayout(dolmen.layout.Layout):
  ...     dolmen.layout.context(Interface)
  ...     dolmen.layout.name('resp')
  ...
  ...     responseFactory = webob.Response
  ...
  ...     def render(self, content):
  ...         return u"Correct layout for %r." % content

  >>> testing.grok_component('resp', ResponseLayout)
  True

  >>> class Page(object):
  ...     responseFactory = webob.Response
  ...
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...
  ...     def render(self):
  ...         return "Isn't this pretty"
  ...
  ...     def update(self):
  ...         self.response = self.responseFactory()
  ...
  ...     def __call__(self):
  ...         self.update()
  ...         if not self.response.status_int in [301, 302]:
  ...            layout = dolmen.layout.query_layout(
  ...                self.request, self.context,
  ...                dolmen.layout.ILayout, 'resp')
  ...            return layout(self.render())
  ...         return self.response

  >>> response = Page(mammoth, request)()
  >>> response
  <Response at ... 200 OK>
  >>> print response.body
  Correct layout for "Isn't this pretty".


Pushing something in the namespace
==================================

You sometime need to push something from the 
view in the layout namespace, for example to display specific menus associated
with this view. You can inject object at render time thanks to keywords 
arguments::

  >>> class SomeLayout(dolmen.layout.Layout):
  ...     dolmen.layout.context(Interface)
  ...
  ...     responseFactory = webob.Response
  ...
  ...     def render(self, content):
  ...         return u"My namespace is %r." % self.namespace()

  >>> class MyView(object):
  ...     pass

  >>> view = MyView()
  >>> layout = SomeLayout(request, mammoth)
  >>> print layout("something to render", view=view)
  200 OK
  Content-Type: text/html; charset=UTF-8
  Content-Length: 223
  <BLANKLINE>
  My namespace is {'layout': <dolmen.layout.tests.SomeLayout object at ...>,
                   'request': <object object at ...>,
                   'context': <object object at ...>,
                   'view': <dolmen.layout.tests.MyView object at ...>}.
